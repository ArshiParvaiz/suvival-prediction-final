__author__ = 'marvinler'

import random
import pandas as pd



def read_labels_tsv_file(DATA_LOCATION):
    return  pd.read_csv(DATA_LOCATION + '\\' + 'labels.tsv', sep='\t', low_memory=False)



def infer_class_from_tcga_name(DATA_LOCATION):
    clinical = read_labels_tsv_file(DATA_LOCATION)
    # cases_ids = clinical['case_submitter_id'].tolist()
    time = []
    labels = []
    # for case_id in cases_ids:
    #     time.append(clinical[clinical['case_submitter_id'].isin([case_id])].iloc[0]['time'])
    #     labels.append(clinical[clinical['case_submitter_id'].isin([case_id])].iloc[0]['event'])
    # return labels, time


def split_svs_samples_casewise(cases, associated_cases_ids, val_size, test_size, seed=123):
    assert len(cases) == len(associated_cases_ids), 'Expected same number of SVS files than associated case ID'
    random.seed(seed)
    train_size = 1. - ( val_size + test_size )

    unique_cases_ids = list(set(associated_cases_ids))
    random.shuffle(unique_cases_ids)
    total_unique_cases_ids = len(unique_cases_ids)

    # Extract cases ids for training, validation and testing sets
    train_cases_ids = unique_cases_ids[:int(train_size*total_unique_cases_ids)]
    val_cases_ids = unique_cases_ids[int(train_size*total_unique_cases_ids):int(train_size*total_unique_cases_ids)+int(val_size*total_unique_cases_ids)]
    test_cases_ids = unique_cases_ids[int(train_size*total_unique_cases_ids)+int(val_size*total_unique_cases_ids):]
    assert len(train_cases_ids) + len(val_cases_ids) + len(test_cases_ids) == total_unique_cases_ids

    # Compute associated split set for SVS files
    train_svs_files, val_svs_files, test_svs_files = [], [], []

    for case, associated_case_id in zip(cases, associated_cases_ids):
        if associated_case_id in train_cases_ids:
            train_svs_files.append(case)
        elif associated_case_id in val_cases_ids:
            val_svs_files.append(case)
        else:
            test_svs_files.append(case)

    # for svs_file, associated_case_id in zip(svs_files, associated_cases_ids):
    #     if associated_case_id in train_cases_ids:
    #         train_svs_files.append(svs_file)
    #     elif associated_case_id in val_cases_ids:
    #         val_svs_files.append(svs_file)
    #     else:
    #         test_svs_files.append(svs_file)

    #sort according to time
    # DATA_LOCATION = r'C:\Users\MMFraz\Downloads\data-classification'
    # clinical = read_labels_tsv_file(DATA_LOCATION)
    # cases_ids_sorted = clinical[["case_submitter_id"]].to_numpy()
    # train_temp = []
    # test_temp = []
    # val_temp = []
    #
    # for id in cases_ids_sorted:
    #     for i, train_id in enumerate(train_cases_ids):
    #         if(train_id == id):
    #             train_temp.append(train_svs_files[i])
    #
    #
    # for id in cases_ids_sorted:
    #     for i, test_id in enumerate(test_cases_ids):
    #         if(test_id == id):
    #             test_temp.append(test_svs_files[i])
    #
    # for id in cases_ids_sorted:
    #     for i, val_id in enumerate(val_cases_ids):
    #         if(val_id == id):
    #             val_temp.append(val_svs_files[i])
    return train_svs_files, val_svs_files, test_svs_files
    # return train_temp, val_temp, test_temp
